- hosts: proxmox-server
  gather_facts: no
  vars_files:
    - ../credentials/vault.yml
  tasks:
    - name: Authenticate with Proxmox API
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/access/ticket"
        method: POST
        body: "username={{ root_user }}&password={{ root_password }}"
        body_format: form-urlencoded
        return_content: yes
        validate_certs: no
      register: auth_response

    - name: Set Proxmox API auth headers
      set_fact:
        proxmox_csrf_token: "{{ auth_response.json.data.CSRFPreventionToken }}"
        proxmox_auth_cookie: "{{ auth_response.json.data.ticket }}"


    ######################### LOAD-BALANCER (4) #########################
    - name: Check if load balancer container exists
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/303"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        return_content: yes
        validate_certs: no
      register: lb_check
      ignore_errors: yes

    - name: Create the load balancer container if it does not exist
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        body:
          vmid: 303
          ostemplate: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
          storage: "local-lvm"
          hostname: "load-balancer"
          memory: 2048
          cores: 2
          net0: "name=eth0,bridge=vmbr0,ip=192.168.68.190/24,gw=192.168.68.1"  # Public network
          net1: "name=eth1,bridge=vmbr1,ip=192.168.2.12/24,gw=192.168.2.1"  # Private network
          ssh-public-keys: "{{ lookup('file', '../ssh-keys/id_rsa.pub') }}"
          rootfs: "local-lvm:10"
        body_format: json
        validate_certs: no
      when: lb_check.status != 200


    - name: Wait for 10 seconds to ensure the container is fully created
      wait_for:
        timeout: 10
      when: lb_check.status != 200

    - name: Ensure the load balancer container is started
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/303/status/start"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        validate_certs: no
      when: lb_check.status != 200



    ######################### WEB-SERVER (1) #########################
    - name: Check if web-server1 container exists
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/300"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        return_content: yes
        validate_certs: no
      register: web1_check
      ignore_errors: yes

    - name: Create the web-server1 container if it does not exist
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        body:
          vmid: 300
          ostemplate: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
          storage: "local-lvm"
          hostname: "web-server1"
          memory: 4096
          cores: 2
          net0: "name=eth0,bridge=vmbr1,ip=192.168.2.10/24,gw=192.168.2.1"  # Private network
          ssh-public-keys: "{{ lookup('file', '../ssh-keys/id_rsa.pub') }}"
          rootfs: "local-lvm:20"
        body_format: json
        validate_certs: no
      when: web1_check.status != 200

    - name: Wait for 10 seconds to ensure the container is fully created
      wait_for:
        timeout: 10
      when: web1_check.status != 200

    - name: Ensure the web-server1 container is started
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/300/status/start"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        validate_certs: no
      when: web1_check.status != 200

    ######################### WEB-SERVER (2) #########################
    - name: Check if web-server2 container exists
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/301"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        return_content: yes
        validate_certs: no
      register: web2_check
      ignore_errors: yes

    - name: Create the web-server2 container if it does not exist
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        body:
          vmid: 301
          ostemplate: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
          storage: "local-lvm"
          hostname: "web-server2"
          memory: 4096
          cores: 2
          net0: "name=eth0,bridge=vmbr1,ip=192.168.2.11/24,gw=192.168.2.1"  # Private network
          ssh-public-keys: "{{ lookup('file', '../ssh-keys/id_rsa.pub') }}"
          rootfs: "local-lvm:20"
        body_format: json
        validate_certs: no
      when: web2_check.status != 200

    - name: Wait for 10 seconds to ensure the container is fully created
      wait_for:
        timeout: 10
      when: web2_check.status != 200

    - name: Ensure the web-server2 container is started
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/301/status/start"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        validate_certs: no
      when: web2_check.status != 200

    ######################### DATABAS-SERVER (3) #########################
    - name: Check if database-server container exists
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/302"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        return_content: yes
        validate_certs: no
      register: db_check
      ignore_errors: yes

    - name: Create the database server container if it does not exist
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        body:
          vmid: 302
          ostemplate: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
          storage: "local-lvm"
          hostname: "database-server"
          memory: 8192
          cores: 4
          net0: "name=eth0,bridge=vmbr1,ip=192.168.2.20/24,gw=192.168.2.1"  # Private network
          ssh-public-keys: "{{ lookup('file', '../ssh-keys/id_rsa.pub') }}"
          rootfs: "local-lvm:50"
        body_format: json
        validate_certs: no
      when: db_check.status != 200

    - name: Wait for 20 seconds to ensure the container is fully created
      wait_for:
        timeout: 20
      when: db_check.status != 200

    - name: Ensure the database server container is started
      uri:
        url: "https://{{ ansible_host }}:8006/api2/json/nodes/s1/lxc/302/status/start"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_auth_cookie }}"
          CSRFPreventionToken: "{{ proxmox_csrf_token }}"
        validate_certs: no
      when: db_check.status != 200
